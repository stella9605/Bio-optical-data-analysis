#### train,test data set
run profile_project4
run profile1

train = pd.read_csv('train.csv', index_col=0)
test = pd.read_csv('test.csv', index_col=0)


################################################################ new 결측지 보완
# 결측치 보완
train_src = train.filter(regex='_src$', axis=1).replace(0, np.NaN) # dst 데이터만 따로 뺀다.
test_src = test.filter(regex='_src$', axis=1).replace(0, np.NaN) # 보간을 하기위해 결측값을 삭제한다.
train_dst = train.filter(regex='_dst$', axis=1).replace(0, np.NaN) # dst 데이터만 따로 뺀다.
test_dst = test.filter(regex='_dst$', axis=1).replace(0, np.NaN) # 보간을 하기위해 결측값을 삭제한다.
test_dst.head(1)

# na컬럼 인덱스
train_index_na=train_src.isna().values | train_dst.isna().values
test_index_na=test_src.isna().values | test_dst.isna().values

# 보간(형식적)
train_dst = train_dst.interpolate(methods='quadratic', axis=1)
test_dst = test_dst.interpolate(methods='quadratic', axis=1)
train_src = train_src.interpolate(methods='quadratic', axis=1)
test_src = test_src.interpolate(methods='quadratic', axis=1)
# 스팩트럼 데이터에서 보간이 되지 않은 값은 'bfill'로 일괄 처리한다.
train_dst=train_dst.apply(lambda x : x.fillna(method='bfill') ,axis=1) 
test_dst=test_dst.apply(lambda x : x.fillna(method='bfill') ,axis=1) 
train_src=train_src.apply(lambda x : x.fillna(method='bfill') ,axis=1) 
test_src=test_src.apply(lambda x : x.fillna(method='bfill') ,axis=1) 

train.update(train_dst) # 보간한 데이터를 기존 데이터프레임에 업데이트 한다.
test.update(test_dst)
train.update(train_src) # 보간한 데이터를 기존 데이터프레임에 업데이트 한다.
test.update(test_src)

# 산소포화도 -------------------------------------
train['SO'] = train.loc[:, 'hhb'] / (train.loc[:, 'hbo2'] + train.loc[:, 'hhb']) * 100
test['hhb'] = test15.loc[:,'hhb']
test['hbo2'] = test15.loc[:,'hbo2']
test['SO'] = test.loc[:, 'hhb'] / (test.loc[:, 'hbo2'] + test.loc[:, 'hhb']) * 100
test = test.drop('hhb', axis=1).drop('hbo2', axis=1)

X = train.iloc[:, :-4]
X = train.iloc[:, :-5] # 산소포화도 계산용
X['SO'] = train['SO'] # 산소포화도 계산용

Y = train.iloc[:,-4:]
Y = train.iloc[:,-5:-3] # 산소포화도 계산용 hhb hbo2
X2 = train.iloc[:,:-3] # 산소포화도
Y2 = train.iloc[:, -3:-1] # 산소포화도

Y_1 = Y.iloc[:,0:1]
Y_2 = Y.iloc[:,1:2]

Y_3 = Y.iloc[:,2:3]
Y_4 = Y.iloc[:,3:4]
Y_3 = Y2.iloc[:,-2] # 산소포화도 ca
Y_4 = Y2.iloc[:,-1] # 산소포화도 NA

# train 변수 튜닝
tunning_X = X.apply(tuning_var, axis = 1)
tunning_test = test.apply(tuning_var, axis = 1)

# 이제 반사도 컬럼으로 변환됐으니 na값을 가졌던 컬럼인덱스를 사용해 NaN을 넣어준다 
tunning_X.iloc[:,1:].values[train_index_na]=np.NaN
tunning_test.iloc[:,1:].values[test_index_na]=np.NaN

# 산소포화도 추가 train 변수 튜닝 
tunning_X = X.apply(tuning_var3, axis = 1)
tunning_test = test.apply(tuning_var3, axis = 1)

# 산소포화도 추가 이제 반사도 컬럼으로 변환됐으니 na값을 가졌던 컬럼인덱스를 사용해 NaN을 넣어준다 
tunning_X.iloc[:,1:36].values[train_index_na]=np.NaN
tunning_test.iloc[:,1:36].values[test_index_na]=np.NaN

# A2_rho 백업
tunning_X_rho = tunning_X.iloc[:,0:1]
tunning_test_rho = tunning_test .iloc[:,0:1]

tunning_X = tunning_X.iloc[0:,1:]
tunning_test = tunning_test.iloc[0:,1:]

# 최종 보간
tunning_X = tunning_X.interpolate(methods='quadratic', axis=1)
tunning_test = tunning_test.interpolate(methods='quadratic', axis=1)
# 스팩트럼 데이터에서 보간이 되지 않은 값은 'bfill'로 일괄 처리한다.
tunning_X=tunning_X.apply(lambda x : x.fillna(method='bfill') ,axis=1) 
tunning_test=tunning_test.apply(lambda x : x.fillna(method='bfill') ,axis=1) 

# 보간된 데이터 프레임과 A2_rho 데이터 프레임 결합
tunning_X = pd.concat([tunning_X_rho, tunning_X ], axis = 1)
tunning_test = pd.concat([tunning_test_rho, tunning_test ], axis = 1)

# 스케일링
from sklearn.preprocessing import RobustScaler
rs = RobustScaler() # 표준화 변환시에는 “이상치, 특이값 (outlier)이 없어야 한다”, 표준화 후 동일한 값을 더 넓게 분포
rs.fit(tunning_X)
tunning_X_scaled = rs.transform(tunning_X)
tunning_test_scaled = rs.transform(tunning_test)

# train, test set
#### hhb
train_x_hhb, test_x_hhb, train_y_hhb, test_y_hhb = train_test_split(tunning_X_scaled,
                                                                    Y_1,
                                                                    random_state = 0)

#### hbo2
train_x_hbo2, test_x_hbo2, train_y_hbo2, test_y_hbo2 = train_test_split(tunning_X_scaled,
                                                                        Y_2,
                                                                        random_state = 0)

#### hhbhbo2
train_x_hhbhbo2, test_x_hhbhbo2, train_y_hhbhbo2, test_y_hhbhbo2 = train_test_split(tunning_X_scaled,
                                                                        Y,
                                                                        random_state = 0)
 
#### ca
train_x_ca, test_x_ca, train_y_ca, test_y_ca = train_test_split(tunning_X_scaled,
                                                                Y_3,
                                                                random_state = 0)

#### na
train_x_na, test_x_na, train_y_na, test_y_na = train_test_split(tunning_X_scaled,
                                                                Y_4,
                                                                random_state = 0)

## new 결측치 보완은 튜닝 전,후를 다 보완했기 때문에 이미 튜닝이 되있는 상태입니다.

############################################## 모델 변경(RandomForestRegressor)
# hhb 스케일러 없음
## hhb
m_rf_hhb = rf_r(n_estimators = 2000,
                max_features = 'auto',
                max_depth = 20,
                min_samples_split = 5,
                min_samples_leaf = 2,
                n_jobs = -1)
m_rf_hhb.fit(train_x_hhb, train_y_hhb.iloc[:,0])

test_y_hhb_predict = m_rf_hhb.predict(test_x_hhb)
train_y_hhb_predict = m_rf_hhb.predict(train_x_hhb)

####MAE
mean_absolute_error(train_y_hhb, train_y_hhb_predict)       # 0.326
mean_absolute_error(test_y_hhb, test_y_hhb_predict)         # 0.774

## hbo2 
m_rf_hbo2 = rf_r(n_estimators = 2000,
                max_features = 'auto',
                max_depth = 20,
                min_samples_split = 5,
                min_samples_leaf = 2,
                n_jobs = -1)
m_rf_hbo2.fit(train_x_hbo2, list(train_y_hbo2.iloc[:,0]))

test_y_hbo2_predict = m_rf_hbo2.predict(test_x_hbo2)
train_y_hbo2_predict = m_rf_hbo2.predict(train_x_hbo2)

####MAE
mean_absolute_error(train_y_hbo2, train_y_hbo2_predict)        # 0.246
mean_absolute_error(test_y_hbo2, test_y_hbo2_predict)          # 0.573

train['SO'] = train.hhb / (train.hbo2 + train.hhb) * 100

## hhbhbo2 
m_rf_hhbhbo2 = rf_r(n_estimators = 2000,
                max_features = 'auto',
                max_depth = 20,
                min_samples_split = 5,
                min_samples_leaf = 2,
                n_jobs = -1)
m_rf_hhbhbo2.fit(train_x_hhbhbo2, train_y_hhbhbo2)

test_y_hhbhbo2_predict = m_rf_hhbhbo2.predict(test_x_hhbhbo2)
train_y_hhbhbo2_predict = m_rf_hhbhbo2.predict(train_x_hhbhbo2)

####MAE
mean_absolute_error(train_y_hhbhbo2, train_y_hhbhbo2_predict)        # train 0.15330239423420072
mean_absolute_error(test_y_hhbhbo2, test_y_hhbhbo2_predict)          # test 0.33598183202477927

train['SO'] = train.hhb / (train.hbo2 + train.hhb) * 100


## ca
m_rf_ca = rf_r(n_estimators = 2000,
                max_features = 'auto',
                max_depth = 20,
                min_samples_split = 5,
                min_samples_leaf = 2,
                n_jobs = -1)
m_rf_ca.fit(train_x_ca, train_y_ca)

test_y_ca_predict = m_rf_ca.predict(test_x_ca)
train_y_ca_predict = m_rf_ca.predict(train_x_ca)

####MAE
mean_absolute_error(train_y_ca, train_y_ca_predict)      # train 0.803  산소포화도 : 0.779
mean_absolute_error(test_y_ca, test_y_ca_predict)        # test 1.845  산소포화도 : 1.809

## na
m_rf_na = rf_r(n_estimators = 2000,
                max_features = 'auto',
                max_depth = 20,
                min_samples_split = 5,
                min_samples_leaf = 2,
                n_jobs = -1)
m_rf_na.fit(train_x_na, train_y_na)

test_y_na_predict = m_rf_na.predict(test_x_na)
train_y_na_predict = m_rf_na.predict(train_x_na)

####MAE
mean_absolute_error(train_y_na, train_y_na_predict)     # 0.669 산소포화도 : 0.667
mean_absolute_error(test_y_na, test_y_na_predict)       # 1.237 산소포화도 : 1.238


test15=pd.read_csv('sample_submission.csv',index_col='id')
test15=test15.astype('float')

########## RandomForestRegressor 모델
test15.hhb=m_rf_hhb.predict(tunning_test_scaled)
test15.hbo2=m_rf_hbo2.predict(tunning_test_scaled)
test15.loc[:,['hhb', 'hbo2']] = m_rf_hhbhbo2.predict(tunning_test_scaled)
test15.ca=m_rf_ca.predict(tunning_test_scaled)
test15.na=m_rf_na.predict(tunning_test_scaled)
test15.to_csv("test 2020-6-23 SO2.csv")
