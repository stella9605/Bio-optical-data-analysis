run profile1
import math
train = pd.read_csv('train.csv', index_col=0)
test = pd.read_csv('test.csv', index_col=0)

train.head()

train.isnull().sum()[train.isnull().sum().values > 0]

# 결측치 보완
train_dst = train.filter(regex='_dst$', axis=1).replace(0, np.NaN) # dst 데이터만 따로 뺀다.
test_dst = test.filter(regex='_dst$', axis=1).replace(0, np.NaN) # 보간을 하기위해 결측값을 삭제한다.
test_dst.head(1)

train_dst = train_dst.interpolate(methods='linear', axis=1)
test_dst = test_dst.interpolate(methods='linear', axis=1)
# 스팩트럼 데이터에서 보간이 되지 않은 값은 0으로 일괄 처리한다.
train_dst.fillna(0, inplace=True) 
test_dst.fillna(0, inplace=True)
test_dst.head(1)

train.update(train_dst) # 보간한 데이터를 기존 데이터프레임에 업데이트 한다.
test.update(test_dst)

X = train.iloc[:, :-4]
Y = train.iloc[:,-4:]

train_x, test_x, train_y, test_y = train_test_split(X,
                                                    Y,
                                                    random_state = 0)

## 튜닝 함수
def tuning_var(s):
    s_rho = s[0]          # _rho
    s_src = s[1:36]       # _src
    s_dst = s[36:]        # _dst    

    # index 표준화
    set_index = s_src.index.str.split('_').str[0]
    s_src.index = set_index
    s_dst.index = set_index

    # 계산식 (흡광도 계산식)
    # A(흡광도) = -log10(I(투과방사선)/I0(입사방사선))  
    #           = ε(흡광계수) ⋅ b(투과 경로 길이(cm)) ⋅ c(농도)
    s_ds_st = ((s_dst / s_src) / (s_rho/10))
    
    # 계산 완료후 inf,nan 0으로 치환
    s_ds_st = [i if i != np.inf else 0.0 for i in s_ds_st ]
    s_ds_st = Series(s_ds_st).fillna(value = 0)
    
    # math.log 계산을 위해 0을 1로 치환후 계산(흡광계수는 1로 가정한다.)
    s_ds_st = [1 if i == 0 else i for i in s_ds_st ]
    
    # 변수 튜닝 반환
    out_s = Series(map(lambda x : -math.log(x,10), s_ds_st))
    out_s.index= set_index
    return(out_s)

# train 변수 튜닝
tunning_train_x = train_x.apply(tuning_var, axis = 1)

# 튜닝 변수 스케일링
m_sacled = StandardScaler()
m_sacled.fit(tunning_train_x)
x_scaled = m_sacled.transform(tunning_train_x)


# 모델의 설정
model = Sequential() 
model.add(Dense(35, input_dim=35, activation='relu')) 
model.add(Dense(17, activation='relu')) 
model.add(Dense(4, activation='softmax'))
 
# 모델 컴파일  
model.compile(loss='mean_squared_error',
              optimizer='adam',
              metrics=['accuracy']) 
 
# 모델 실행 
model.fit(x_scaled, train_y, epochs=200, batch_size=10) 


# test_x 변수 튜닝
tunning_test_x = test_x.apply(tuning_var, axis = 1)

# test_x 튜닝변수 스케일링
test_x_scaled = m_sacled.transform(tunning_test_x)

print("\n Accuracy: %.4f" % (model.evaluate(x_scaled,train_y)[1]))
print("\n Accuracy: %.4f" % (model.evaluate(test_x_scaled,test_y)[1]))
